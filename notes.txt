TODO: I SUSPECT ALL THE *FX3,%00010110 COMMANDS SAVE THE OLD STATUS TO &100 BUT I NEED TO CHECK THEM ALL

Entering via *PASCAL command:
- recognised by service handler of interpreter ROM
- this uses OSBYTE 142 to enter itself with no additional fuss

Entering interpreter ROM's language entry point:
- sets up BRKV handler
- set last break type to 0
- if b7 of last break type (before it was set to 0) is clear (i.e. the "normal" case for any language), transfer control to real_language_entry
- execute *FX3 with the X value stored at &100 in the I/O processor, i.e. reinstating TODO WHERE DID WE STORE the *FX3 state we temporarily changed to hide the language startup banner
- if b6 of last break type (before it was set to 0) is clear (in practice, this means last_break_type was &80), transfer control to real_language_entry
- if b5 of last break type (before it was set to 0) is clear (in practice, this means last_break_type was &C0), TODO DO SOME STUFF, PROBABLY "WARM-ISH START" STUFF and then transfer control to language_entry_common, resuming the command prompt loop
- (in practice last_break_type was &E0 at this point)
- TODO DO SOME SETUP-Y STUFF, print the error and resume the command prompt loop at language_entry_common

Interpreter ROM real_language_entry:
 - seems to have some "command tail" parsing of a string in the I/O processor to recognise " @ ", but I'm not currently sure where this command tail comes from
 - enters a command line reading loop

So in short (as you might expect) the compiler ROM plays no part in entering the interpreter and there is no back-and-forth between the two ROMs in these basic situations. I assume this means you can run pre-compiled Pascal code without having the compiler ROM present with no problems at all.

The interpreter ROM also has some other relevant behaviour which will be invoked below.

*FX163,192,1 is executed:
- (this is executed by the compiler ROM when it is entered as a language in the ordinary way)
- this is recognised by the interpreter ROM's service handler
- the last break type is set to &80
- *FX3,%00010110 is executed to disable the RS423, VDU and printer drivers and spooled output. I believe the idea here is to hide the OS printing the language name when we...
- enter ourself as the current language using *FX142

*FX163,192,3 is executed:
- (this is executed by the compiler ROM's BRKV handler)
- this is recognised by the interpreter ROM's service handler
- set last break type to &E0
- *FX3,%00010110 is executed to disable the RS423, VDU and printer drivers and spooled output. I believe the idea here is to hide the OS printing the language name when we...
- enter ourself as the current language using *FX142

TODO: *FX163,192,2



"COMPILE" entered at interpreter prompt:
- this code is at command_compile_handler in the interpreter ROM
- memory addresses are set up to reflect the start and end available RAM after allowing space for the interpreter code
- the interpreter code is copied to RAM and patched up to fix absolute addresses and so on (I haven't gone into full detail on this code, at least yet)
- the 16-bit pointer at &1e is set to the hard-coded address of the compile bytecode in the compiler ROM. &1e is presumably the VM program counter. TODO: JUST ASSIGN A LABEL TO THIS?
- *FX163,192,0 is executed (literally, via OSCLI)

*FX163,192,0 is executed:
- this is recognised by the compiler ROM's service handler
- the last break type is set to &80
- *FX3,%00010110 is executed to disable the RS423, VDU and printer drivers and spooled output. I believe the idea here is to hide the OS printing the language name when we...
- enter ourself as the current language using *FX142

Compiler ROM's language entry point:
- sets up BRKV handler
- sets last break type to 0
- if b7 of the last break type (before it was set to 0) is clear (i.e. the "normal" case for any language), execute (with OSCLI) *FX163,192,1. This effectively enters the interpreter ROM as the current language without showing its startup banner, which means that if the compiler ROM is entered as the default language by the OS or via the user executing *FX142, the interpreter ROM will start up as well. This means the order of the two ROMs doesn't matter, even in a BBC B/B+ where one of the ROMs is the higher priority language in the system.
- execute *FX3 with the X value stored at &100 in the I/O processor, i.e. reinstating TODO WHERE DID WE STORE the *FX3 state we temporarily changed to hide the language startup banner
- jmp (&62e) TODO: WHICH IS SET UP WHERE? BUT I GUESS THIS IS THE VM INTEPRETER ENTRY POINT

Compiler ROM's BRKV handler:
- copies the error details to &41A, presumably because when we enter a new language in what follows the OS will overwrite the error with the language's copyright string
- executes *FX163,192,3 via OSCLI
















